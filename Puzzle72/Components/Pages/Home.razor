@page "/"
@using Puzzle72.Models
@using Puzzle72.Components

<PageTitle>Home</PageTitle>

<h1>Blazor Puzzle #72</h1>

<p>We have several lists, some of which are shown to one customer but not another.</p>

<p>We want to arrange them, no matter how many there are, in a bootstrap grid of three columns per row with no gaps.</p>

<p>
    For demonstration purposes, we only have eight lists, but imagine there were 20 or more possible lists, each
    may be shown or not shown.
</p>

<p>
    How can we make this UI dynamic, so that it only shows the lists that we want without leaving gaps in the grid.
    To get you started, we have created a dictionary that tells you whether or not to show a list.
</p>

<p>
    This is really a puzzle of how to make bootstrap rows and columns dynamic.
    We don't know which lists, and therefore how many, need to be shown in the grid at runtime.
</p>

<div class="container mt-4">
    <div class="row mb-3">
        <MyList ShowList="@ShowList["Colors"]" 
                Title="Colors" Items="@Colors.List" 
                OnSelected="ColorSelected" 
                SelectedItem="@SelectedColor" 
                ItemText="c => c.Name" 
                ItemValue="c => c.Id.ToString()" />

        <MyList ShowList="@ShowList["Episodes"]" 
                Title="Episodes" Items="@Episodes.List" 
                OnSelected="EpisodeSelected" 
                SelectedItem="@SelectedEpisode" 
                ItemText="e => e.Title" 
                ItemValue="e => e.Number.ToString()" />

        <MyList ShowList="@ShowList["Friends"]" 
                Title="Friends" Items="@Friends.List" 
                OnSelected="FriendSelected" 
                SelectedItem="@SelectedFriend" 
                ItemText="f => f.Name" 
                ItemValue="f => f.Id.ToString()" />
    </div>
    <div class="row mb-3">
        <MyList ShowList="@ShowList["Fruits"]" 
                Title="Fruits" Items="@Fruits.List" 
                OnSelected="FruitSelected" 
                SelectedItem="@SelectedFruit" 
                ItemText="f => f.Name" 
                ItemValue="f => f.Id.ToString()" />

        <MyList ShowList="@ShowList["Languages"]" 
                Title="Languages" Items="@Languages.List" 
                OnSelected="LanguageSelected" 
                SelectedItem="@SelectedLanguage" 
                ItemText="l => l.Name" 
                ItemValue="l => l.Id.ToString()" />

        <MyList ShowList="@ShowList["Metals"]" 
                Title="Metals" Items="@Metals.List" 
                OnSelected="MetalSelected" 
                SelectedItem="@SelectedMetal" 
                ItemText="m => m.Name" 
                ItemValue="m => m.Id.ToString()" />
    </div>
    <div class="row mb-3">
        <MyList ShowList="@ShowList["Pets"]" 
                Title="Pets" Items="@Pets.List" 
                OnSelected="PetSelected" 
                SelectedItem="@SelectedPet" 
                ItemText="p => p.Name" 
                ItemValue="p => p.Id.ToString()" />

        <MyList ShowList="@ShowList["Vegetables"]" 
                Title="Vegetables" Items="@Vegetables.List" 
                OnSelected="VegetableSelected" 
                SelectedItem="@SelectedVegetable" 
                ItemText="v => v.Name" 
                ItemValue="v => v.Id.ToString()" />
    </div>
</div>

<br />
<br />
<h3>Show or Hide Lists</h3>
@foreach (var kvp in ShowList)
{
    <div>
        <input type="checkbox" checked="@kvp.Value" @onchange="e => Toggle(kvp.Key, e)" />
        <label>@kvp.Key</label>
    </div>
}

<br />
<br />

@if (ShowList["Colors"])
{
    <h4>Selected Color</h4>
    @if (SelectedColor == null)
    {
        <p>No color selected</p>
    }
    else
    {
        <p>Color: @SelectedColor.Name</p>
    }
}

@if (ShowList["Episodes"])
{
    <h4>Selected Episode</h4>
    @if (SelectedEpisode == null)
    {
        <p>No episode selected</p>
    }
    else
    {
        <p>Episode: @SelectedEpisode.Title: @SelectedEpisode.Title</p>
    }
}

@if (ShowList["Friends"])
{
    <h4>Selected Friend</h4>
    @if (SelectedFriend == null)
    {
        <p>No friend selected</p>
    }
    else
    {
        <p>Friend: @SelectedFriend.Name</p>
    }
}

@if (ShowList["Fruits"])
{
    <h4>Selected Fruit</h4>
    @if (SelectedFruit == null)
    {
        <p>No fruit selected</p>
    }
    else
    {
        <p>Fruit: @SelectedFruit.Name</p>
    }
}

@if (ShowList["Languages"])
{
    <h4>Selected Language</h4>
    @if (SelectedLanguage == null)
    {
        <p>No language selected</p>
    }
    else
    {
        <p>Language: @SelectedLanguage.Name</p>
    }
}

@if (ShowList["Metals"])
{
    <h4>Selected Metal</h4>
    @if (SelectedMetal == null)
    {
        <p>No metal selected</p>
    }
    else
    {
        <p>Metal: @SelectedMetal.Name</p>
    }
}

@if (ShowList["Pets"])
{
    <h4>Selected Pet</h4>
    @if (SelectedPet == null)
    {
        <p>No pet selected</p>
    }
    else
    {
        <p>Pet: @SelectedPet.Name</p>
    }
}

@if (ShowList["Vegetables"])
{
    <h4>Selected Vegetable</h4>
    @if (SelectedVegetable == null)
    {
        <p>No vegetable selected</p>
    }
    else
    {
        <p>Vegetable: @SelectedVegetable.Name</p>
    }
}

@code
{

    Color SelectedColor;
    Episode SelectedEpisode;
    Friend SelectedFriend;
    Fruit SelectedFruit;
    Language SelectedLanguage;
    Metal SelectedMetal;
    Pet SelectedPet;
    Vegetable SelectedVegetable;

    // This dictionary will simulate logic to tell whether or not a list should be shown
    Dictionary<string, bool> ShowList = new()
    {
        { "Colors", true },
        { "Episodes", true },
        { "Friends", true },
        { "Fruits", true },
        { "Languages", true },
        { "Metals", true },
        { "Pets", true },
        { "Vegetables", true }
    };

    private void Toggle(string key, ChangeEventArgs e)
    {
        if (e.Value is bool value)
        {
            ShowList[key] = value;
        }
        else if (bool.TryParse(e.Value?.ToString(), out var parsed))
        {
            ShowList[key] = parsed;
        }
    }

    void ColorSelected(ChangeEventArgs e)
    {
        int colorId = Convert.ToInt32(e.Value);
        if (colorId == 0)
            SelectedColor = null;
        else
            SelectedColor = Colors.List.FirstOrDefault(c => c.Id == colorId);
    }

    void EpisodeSelected(ChangeEventArgs e)
    {
        int episodeNumber = Convert.ToInt32(e.Value);
        if (episodeNumber == 0)
            SelectedEpisode = null;
        else
            SelectedEpisode = Episodes.List.FirstOrDefault(ep => ep.Number == episodeNumber);
    }

    void FriendSelected(ChangeEventArgs e)
    {
        int friendId = Convert.ToInt32(e.Value);
        if (friendId == 0)
            SelectedFriend = null;
        else
            SelectedFriend = Friends.List.FirstOrDefault(fr => fr.Id == friendId);
    }

    void FruitSelected(ChangeEventArgs e)
    {
        int fruitId = Convert.ToInt32(e.Value);
        if (fruitId == 0)
            SelectedFruit = null;
        else
            SelectedFruit = Fruits.List.FirstOrDefault(f => f.Id == fruitId);
    }

    void LanguageSelected(ChangeEventArgs e)
    {
        int languageId = Convert.ToInt32(e.Value);
        if (languageId == 0)
            SelectedLanguage = null;
        else
            SelectedLanguage = Languages.List.FirstOrDefault(l => l.Id == languageId);
    }

    void MetalSelected(ChangeEventArgs e)
    {
        int metalId = Convert.ToInt32(e.Value);
        if (metalId == 0)
            SelectedMetal = null;
        else
            SelectedMetal = Metals.List.FirstOrDefault(m => m.Id == metalId);
    }

    void PetSelected(ChangeEventArgs e)
    {
        int petId = Convert.ToInt32(e.Value);
        if (petId == 0)
            SelectedPet = null;
        else
            SelectedPet = Pets.List.FirstOrDefault(p => p.Id == petId);
    }

    void VegetableSelected(ChangeEventArgs e)
    {
        int vegetableId = Convert.ToInt32(e.Value);
        if (vegetableId == 0)
            SelectedVegetable = null;
        else
            SelectedVegetable = Vegetables.List.FirstOrDefault(v => v.Id == vegetableId);
    }
}
